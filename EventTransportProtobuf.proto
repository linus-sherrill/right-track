/*ckwg +29
 * Copyright 2018 by Kitware, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  * Neither name of Kitware, Inc. nor the names of any contributors may be used
 *    to endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file defines the set of protocol buffers that implement the
 * event records.
 */

syntax = "proto2";

package RightTrack.proto;

// Common time stamp
message TimeStamp {

  required uint64       secs = 1;
  required uint64       usecs = 2;
};

/* ------------------------------------------------------------------
 * This message is used to define an event.
 */
message EventDefinition {

  required TimeStamp       event_time = 1;
  required int32           event_type = 2;
  required int32           event_id = 3;
  required string          event_name = 4;
  required string          event_group = 5;
  required int32           event_color = 6;
};

/* ------------------------------------------------------------------
 * This message defines an event start and/or end. The data is the
 * same for both types. The event type in the envelope determines the
 * real event type.
 */
message EventStartEnd {

  required TimeStamp       event_time = 1;
  required int32           event_id = 2;
  required uint32          event_pid = 3;
  repeated double          event_data = 4;
};

/* ------------------------------------------------------------------
 * This message defines a text message event.
 */
message EventText {

  required TimeStamp       event_time = 1;
  required int32           event_id = 2;
  required uint32          event_pid = 3;
  required string          event_text = 4;
};

/* ------------------------------------------------------------------
 * This message defines a context for recording events.
 */
message ContextDefinition {

  required string          context_name = 1;
  required int32           context_id = 2;
};


/* ------------------------------------------------------------------
 * This message defines a context push and/or pop. The data is the
 * same for both events. The actual type is specified in the envelope.
 */
message ContextPushPop {

  required TimeStamp       event_time = 1;
  required int32           context_id = 2;
};


/* ------------------------------------------------------------------
 * This message defines the envelope that holds the specific event
 * that is being transmitted.
 */
message EventEnvelope {

  enum Type {
    EVENT_DEFINITION = 1;
    EVENT_START = 2;
    EVENT_END = 3;
    CONTEXT_DEFINITION = 4;
    CONTEXT_PUSH = 5;
    CONTEXT_POP = 6;
    EVENT_TEXT = 7;
  };

  required Type               type = 1;

  optional EventDefinition      event_definition = 2;
  optional EventStartEnd        event_start_end = 3;
  optional EventText            event_text = 4;
  optional ContextDefinition    context_def = 5;
  optional ContextPushPop       context_push_pop = 6;
};
