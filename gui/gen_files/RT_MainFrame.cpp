// -*- C++ -*-
//
// generated by wxGlade 0.9.5 on Fri May 29 14:58:35 2020
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "RT_MainFrame.h"

// begin wxGlade: ::extracode

#include "resources/martini.xpm"
#include "resources/Bottom.xpm"
#include "resources/down_arrow.xpm"
#include "resources/Expand.xpm"
#include "resources/Filter.xpm"
#include "resources/left_arrow.xpm"
#include "resources/Linux.xpm"
#include "resources/right_arrow.xpm"
#include "resources/Top.xpm"
#include "resources/up_arrow.xpm"
#include "resources/zoom_in.xpm"
#include "resources/zoom_out.xpm"
// end wxGlade


RT_MainFrame::RT_MainFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: RT_MainFrame::RT_MainFrame
    SetSize(wxSize(1530, 870));
    frame_1_menubar = new wxMenuBar();
    FileMenu = new wxMenu();
    FileOpen = FileMenu->Append(FileOpen_id, wxT("Open old session"), wxT("Open saved session"));
    Bind(wxEVT_MENU, &RT_MainFrame::FileOpenHandler, this, FileOpen_id);
    FileMerge = FileMenu->Append(FileMerge_id, wxT("Load new events"), wxT("Merge events into current data set."));
    Bind(wxEVT_MENU, &RT_MainFrame::MergeEventsHandler, this, FileMerge_id);
    FileSave = FileMenu->Append(wxID_SAVE, wxT("Save"), wxT("Save current analysis"));
    Bind(wxEVT_MENU, &RT_MainFrame::SaveHandler, this, wxID_SAVE);
    FileMenu->Append(wxID_SAVEAS, wxT("Save As..."), wxT("Save data set under a new name"));
    Bind(wxEVT_MENU, &RT_MainFrame::SaveAsHandler, this, wxID_SAVEAS);
    FileQuit = FileMenu->Append(wxID_EXIT, wxT("Quit"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::QuitHandler, this, wxID_EXIT);
    frame_1_menubar->Append(FileMenu, wxT("File"));
    EditMenu = new wxMenu();
    EditMenu->Append(wxID_UNDO, wxT("Undo"), wxEmptyString);
    EditMenu->Append(wxID_CUT, wxT("Cut"), wxEmptyString);
    EditMenu->Append(wxID_COPY, wxT("Copy"), wxEmptyString);
    EditMenu->Append(wxID_PASTE, wxT("Paste"), wxEmptyString);
    EditMenu->Append(DataSetAnnotation_id, wxT("Edit Data Set Annotation"), wxT("Edit description of this data set"));
    Bind(wxEVT_MENU, &RT_MainFrame::EditDataSetAnnotationHandler, this, DataSetAnnotation_id);
    EditMenu->Append(EventSearch_id, wxT("Search"), wxT("Search for event names"));
    frame_1_menubar->Append(EditMenu, wxT("Edit"));
    ViewMenu = new wxMenu();
    ZoomIn = ViewMenu->Append(wxID_ZOOM_IN, wxT("Zoom in"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::ZoomInHandler, this, wxID_ZOOM_IN);
    ZoomOut = ViewMenu->Append(wxID_ZOOM_OUT, wxT("Zoom out"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::ZoomOutHandler, this, wxID_ZOOM_OUT);
    ViewMenu->Append(wxID_ZOOM_FIT, wxT("Zoom to fill window"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::ZoomFillHandler, this, wxID_ZOOM_FIT);
    ViewMenu->Append(MenuRefresh_id, wxT("Refresh"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::RefreshHandler, this, MenuRefresh_id);
    EventDataSummary = ViewMenu->Append(EventData_id, wxT("Event Data Summary"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::EventDataHandler, this, EventData_id);
    CursorMenu = ViewMenu->Append(CursorMenu_id, wxT("Cursor display"), wxEmptyString, wxITEM_CHECK);
    Bind(wxEVT_MENU, &RT_MainFrame::CursorMenuHandler, this, CursorMenu_id);
    ResetCursors = ViewMenu->Append(ResetCursor_id, wxT("Reset cursors"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::ResetCursorHandler, this, ResetCursor_id);
    wxMenu* ViewMenu_sub = new wxMenu();
    ViewMenu_sub->Append(SortEventName_id, wxT("Event Name"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::SortEventNameHandler, this, SortEventName_id);
    ViewMenu_sub->Append(SortNumOccur_id, wxT("Num Occurrences"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::SortNumOccurHandler, this, SortNumOccur_id);
    ViewMenu_sub->Append(SortAvg_id, wxT("Average Duration"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::SortAvgHandler, this, SortAvg_id);
    ViewMenu_sub->Append(SortMaxDuration_id, wxT("Max Duration"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::SortMaxDurationHandler, this, SortMaxDuration_id);
    ViewMenu_sub->Append(SortMinDuration_id, wxT("Min Duration"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::SortMinDurationHandler, this, SortMinDuration_id);
    ViewMenu_sub->Append(SortPctAct_id, wxT("Percent Active"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::SortPctActHandler, this, SortPctAct_id);
    ViewMenu->Append(wxID_ANY, wxT("Sort By"), ViewMenu_sub, wxEmptyString);
    frame_1_menubar->Append(ViewMenu, wxT("View"));
    ToolsMenu = new wxMenu();
    ToolsMenu->Append(ColorPicker_id, wxT("Color"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::ColorPickerHandler, this, ColorPicker_id);
    frame_1_menubar->Append(ToolsMenu, wxT("Tools"));
    HelpMenu = new wxMenu();
    AboutMenu = HelpMenu->Append(wxID_ABOUT, wxT("About"), wxEmptyString);
    Bind(wxEVT_MENU, &RT_MainFrame::AboutHandler, this, wxID_ABOUT);
    frame_1_menubar->Append(HelpMenu, wxT("Help"));
    SetMenuBar(frame_1_menubar);
    frame_1_toolbar = new wxToolBar(this, -1);
    SetToolBar(frame_1_toolbar);
    frame_1_toolbar->AddTool(wxID_ZOOM_IN, wxT("Zoom In"), zoom_in_xpm, wxNullBitmap, wxITEM_NORMAL, wxT("Zoom in"), wxEmptyString);
    frame_1_toolbar->AddTool(wxID_ZOOM_OUT, wxT("Zoom Out"), zoom_out_xpm, wxNullBitmap, wxITEM_NORMAL, wxT("Zoom out"), wxEmptyString);
    frame_1_toolbar->AddTool(wxID_ZOOM_FIT, wxT("Zoom Fit"), Expand_xpm, wxNullBitmap, wxITEM_NORMAL, wxT("Zoom to fit window"), wxEmptyString);
    frame_1_toolbar->AddSeparator();
    frame_1_toolbar->AddTool(move_top_id, wxT("Move to Top"), Top_xpm, wxNullBitmap, wxITEM_NORMAL, wxT("Move event to top of list"), wxEmptyString);
    frame_1_toolbar->AddTool(wxID_UP, wxT("Move Up"), up_arrow_xpm, wxNullBitmap, wxITEM_NORMAL, wxT("Move event up one row"), wxEmptyString);
    frame_1_toolbar->AddTool(wxID_DOWN, wxT("Move Down"), down_arrow_xpm, wxNullBitmap, wxITEM_NORMAL, wxT("Move event down one row"), wxEmptyString);
    frame_1_toolbar->AddTool(move_bottom_id, wxT("Move to Bottom"), Bottom_xpm, wxNullBitmap, wxITEM_NORMAL, wxT("Move event to bottom of list"), wxEmptyString);
    frame_1_toolbar->AddTool(filter_events_id, wxT("Filter empty events"), Filter_xpm, wxNullBitmap, wxITEM_CHECK, wxT("Filter out empty events"), wxEmptyString);
    frame_1_toolbar->AddSeparator();
    frame_1_toolbar->AddTool(ResetCursor_id, wxT("Reset Cursors"), Linux_xpm, wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    frame_1_toolbar->AddTool(wxID_ANY, wxT("Party Time"), martini_xpm, wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    frame_1_toolbar->Realize();
    g_EventList = new wxTreeCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN|wxTR_DEFAULT_STYLE|wxTR_HIDE_ROOT|wxTR_NO_LINES|wxTR_TWIST_BUTTONS);
    g_EventFrame = new EventCanvas(this, wxID_ANY);
    g_StartTime = new wxTextCtrl(this, timeline_endpoint_update_id, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
    g_timeScale = new wxPanel(this, wxID_ANY);
    g_EndTime = new wxTextCtrl(this, timeline_endpoint_update_id, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
    g_TotalEventCount = new wxStaticText(this, wxID_ANY, wxT("Total events: 0"));
    static_line_1 = new wxStaticLine(this, wxID_ANY);
    g_EventInfo = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxHSCROLL|wxTE_MULTILINE|wxTE_READONLY);
    g_CommentText = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxHSCROLL|wxTE_CHARWRAP|wxTE_MULTILINE|wxTE_PROCESS_ENTER);
    static_line_2 = new wxStaticLine(this, wxID_ANY);
    label_1 = new wxStaticText(this, wxID_ANY, wxT("Cursor 1"));
    g_Curs1Time = new wxTextCtrl(this, set_1_id, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
    spin_button_1 = new wxSpinButton(this, spin_1_id, wxDefaultPosition, wxDefaultSize, wxSP_WRAP);
    label_2 = new wxStaticText(this, wxID_ANY, wxT("Cursor 2"));
    g_Curs2Time = new wxTextCtrl(this, set_2_id, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
    spin_button_2 = new wxSpinButton(this, spin_2_id, wxDefaultPosition, wxDefaultSize, wxSP_WRAP);
    g_CursDtime = new wxStaticText(this, wxID_ANY, wxT("Delta time:"));
    static_line_3 = new wxStaticLine(this, wxID_ANY);
    panel_1 = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);

    set_properties();
    do_layout();
    // end wxGlade
}


void RT_MainFrame::set_properties()
{
    // begin wxGlade: RT_MainFrame::set_properties
    SetTitle(wxT("Right Track Event Viewer"));
    g_TotalEventCount->SetMinSize(wxSize(150, 17));
    static_line_1->SetBackgroundColour(wxColour(255, 127, 0));
    static_line_1->SetForegroundColour(wxColour(255, 127, 0));
    static_line_2->SetBackgroundColour(wxColour(255, 127, 0));
    static_line_2->SetForegroundColour(wxColour(255, 127, 0));
    static_line_3->SetBackgroundColour(wxColour(255, 127, 0));
    static_line_3->SetForegroundColour(wxColour(255, 127, 0));
    panel_1->SetScrollRate(10, 10);
    // end wxGlade
}


void RT_MainFrame::do_layout()
{
    // begin wxGlade: RT_MainFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    sizer_3->Add(g_EventList, 2, wxALL|wxEXPAND, 1);
    sizer_4->Add(g_EventFrame, 1, wxALL|wxEXPAND, 3);
    sizer_5->Add(g_StartTime, 1, wxBOTTOM|wxEXPAND, 3);
    sizer_5->Add(g_timeScale, 6, 0, 0);
    sizer_5->Add(g_EndTime, 1, wxBOTTOM|wxEXPAND, 3);
    sizer_4->Add(sizer_5, 0, wxEXPAND, 0);
    sizer_3->Add(sizer_4, 13, wxEXPAND, 0);
    sizer_1->Add(sizer_3, 1, wxEXPAND, 0);
    sizer_2->Add(g_TotalEventCount, 0, wxEXPAND, 0);
    sizer_2->Add(static_line_1, 0, wxEXPAND, 0);
    sizer_2->Add(g_EventInfo, 5, wxEXPAND, 0);
    sizer_2->Add(g_CommentText, 5, wxEXPAND, 0);
    sizer_2->Add(static_line_2, 0, wxEXPAND, 0);
    sizer_6->Add(label_1, 0, 0, 0);
    sizer_6->Add(g_Curs1Time, 0, 0, 0);
    sizer_6->Add(spin_button_1, 0, 0, 0);
    sizer_2->Add(sizer_6, 1, 0, 0);
    sizer_7->Add(label_2, 0, 0, 0);
    sizer_7->Add(g_Curs2Time, 0, 0, 0);
    sizer_7->Add(spin_button_2, 0, 0, 0);
    sizer_2->Add(sizer_7, 1, 0, 0);
    sizer_2->Add(g_CursDtime, 1, wxEXPAND, 0);
    sizer_2->Add(static_line_3, 0, wxEXPAND, 0);
    sizer_2->Add(panel_1, 6, wxEXPAND, 0);
    sizer_1->Add(sizer_2, 0, wxEXPAND, 0);
    SetSizer(sizer_1);
    Layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(RT_MainFrame, wxFrame)
    // begin wxGlade: RT_MainFrame::event_table
    EVT_TOOL(move_top_id, RT_MainFrame::handle_move_top)
    EVT_TOOL(wxID_UP, RT_MainFrame::handle_move_up)
    EVT_TOOL(wxID_DOWN, RT_MainFrame::handle_move_down)
    EVT_TOOL(move_bottom_id, RT_MainFrame::handle_move_bottom)
    EVT_TOOL(filter_events_id, RT_MainFrame::handle_filter_events)
    EVT_TREE_END_DRAG(wxID_ANY, RT_MainFrame::TreeEndDragHandler)
    EVT_TREE_ITEM_ACTIVATED(wxID_ANY, RT_MainFrame::TreeItemActivatedHandler)
    EVT_TREE_ITEM_COLLAPSED(wxID_ANY, RT_MainFrame::TreeItemCollapsedHandler)
    EVT_TEXT_ENTER(timeline_endpoint_update_id, RT_MainFrame::handle_enter_timeline)
    EVT_TEXT_ENTER(timeline_endpoint_update_id, RT_MainFrame::handle_enter_timeline)
    EVT_TEXT_ENTER(set_1_id, RT_MainFrame::Curs1Set)
    EVT_SPIN_DOWN(spin_1_id, RT_MainFrame::Curs1Down)
    EVT_SPIN_UP(spin_1_id, RT_MainFrame::Curs1Up)
    EVT_TEXT_ENTER(set_2_id, RT_MainFrame::Curs2Set)
    EVT_SPIN_DOWN(spin_2_id, RT_MainFrame::Curs2Down)
    EVT_SPIN_UP(spin_2_id, RT_MainFrame::Curs2Up)
    // end wxGlade
END_EVENT_TABLE();


void RT_MainFrame::FileOpenHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::FileOpenHandler) not implemented yet"));
}

void RT_MainFrame::MergeEventsHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::MergeEventsHandler) not implemented yet"));
}

void RT_MainFrame::SaveHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::SaveHandler) not implemented yet"));
}

void RT_MainFrame::SaveAsHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::SaveAsHandler) not implemented yet"));
}

void RT_MainFrame::QuitHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::QuitHandler) not implemented yet"));
}

void RT_MainFrame::EditDataSetAnnotationHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::EditDataSetAnnotationHandler) not implemented yet"));
}

void RT_MainFrame::ZoomInHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::ZoomInHandler) not implemented yet"));
}

void RT_MainFrame::ZoomOutHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::ZoomOutHandler) not implemented yet"));
}

void RT_MainFrame::ZoomFillHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::ZoomFillHandler) not implemented yet"));
}

void RT_MainFrame::RefreshHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::RefreshHandler) not implemented yet"));
}

void RT_MainFrame::EventDataHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::EventDataHandler) not implemented yet"));
}

void RT_MainFrame::CursorMenuHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::CursorMenuHandler) not implemented yet"));
}

void RT_MainFrame::ResetCursorHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::ResetCursorHandler) not implemented yet"));
}

void RT_MainFrame::SortEventNameHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::SortEventNameHandler) not implemented yet"));
}

void RT_MainFrame::SortNumOccurHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::SortNumOccurHandler) not implemented yet"));
}

void RT_MainFrame::SortAvgHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::SortAvgHandler) not implemented yet"));
}

void RT_MainFrame::SortMaxDurationHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::SortMaxDurationHandler) not implemented yet"));
}

void RT_MainFrame::SortMinDurationHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::SortMinDurationHandler) not implemented yet"));
}

void RT_MainFrame::SortPctActHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::SortPctActHandler) not implemented yet"));
}

void RT_MainFrame::ColorPickerHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::ColorPickerHandler) not implemented yet"));
}

void RT_MainFrame::AboutHandler(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::AboutHandler) not implemented yet"));
}

void RT_MainFrame::handle_move_top(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::handle_move_top) not implemented yet"));
}

void RT_MainFrame::handle_move_up(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::handle_move_up) not implemented yet"));
}

void RT_MainFrame::handle_move_down(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::handle_move_down) not implemented yet"));
}

void RT_MainFrame::handle_move_bottom(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::handle_move_bottom) not implemented yet"));
}

void RT_MainFrame::handle_filter_events(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::handle_filter_events) not implemented yet"));
}

void RT_MainFrame::TreeEndDragHandler(wxTreeEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::TreeEndDragHandler) not implemented yet"));
}

void RT_MainFrame::TreeItemActivatedHandler(wxTreeEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::TreeItemActivatedHandler) not implemented yet"));
}

void RT_MainFrame::TreeItemCollapsedHandler(wxTreeEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::TreeItemCollapsedHandler) not implemented yet"));
}

void RT_MainFrame::handle_enter_timeline(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::handle_enter_timeline) not implemented yet"));
}

void RT_MainFrame::Curs1Set(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::Curs1Set) not implemented yet"));
}

void RT_MainFrame::Curs1Down(wxSpinEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::Curs1Down) not implemented yet"));
}

void RT_MainFrame::Curs1Up(wxSpinEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::Curs1Up) not implemented yet"));
}

void RT_MainFrame::Curs2Set(wxCommandEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::Curs2Set) not implemented yet"));
}

void RT_MainFrame::Curs2Down(wxSpinEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::Curs2Down) not implemented yet"));
}

void RT_MainFrame::Curs2Up(wxSpinEvent &event)  // wxGlade: RT_MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (RT_MainFrame::Curs2Up) not implemented yet"));
}


// wxGlade: add RT_MainFrame event handlers

